@page "/"
@using EldenRingArmorOptimizer.Engine.Repositories
@using EldenRingArmorOptimizer.Engine.Records
@using EldenRingArmorOptimizer.Engine.Enums
@inject IArmorPieceRepository ArmorPieceRepository
@inject ITalismanRepository TalismanRepository
@inject IWeaponRepository WeaponRepository

<table class="table">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Physical</th>
        <th scope="col">Magic</th>
        <th scope="col">Lightning</th>
        <th scope="col">Fire</th>
        <th scope="col">Holy</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var armorPiece in _armorPieces)
    {
        <tr>
            <td>@armorPiece.Name</td>
            <td>@armorPiece.Physical</td>
            <td>@armorPiece.Magic</td>
            <td>@armorPiece.Lightning</td>
            <td>@armorPiece.Fire</td>
            <td>@armorPiece.Holy</td>
        </tr>
    }
    </tbody>
</table>

<hr/>

<table class="table">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Equip Load Modifier</th>
        <th scope="col">Endurance Modifier</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var talisman in _talismans)
    {
        <tr>
            <td>@talisman.Name</td>
            <td>@talisman.EquipLoadModifier</td>
            <td>@talisman.EnduranceModifier</td>
        </tr>
    }
    </tbody>
</table>

<hr/>

<table class="table">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Weight</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var weapon in _weapons)
    {
        <tr>
            <td>@weapon.Name</td>
            <td>@weapon.Weight</td>
        </tr>
    }
    </tbody>
</table>

@code
{
    private IEnumerable<ArmorPiece> _armorPieces = new List<ArmorPiece>();
    private IEnumerable<Talisman> _talismans = new List<Talisman>();
    private IEnumerable<Weapon> _weapons = new List<Weapon>();

    protected override async Task OnInitializedAsync()
    {
        var armorPiecesTask = ArmorPieceRepository.GetByTypeAsync(ArmorType.Head);
        var talismansTask = TalismanRepository.GetAll();
        var weaponsTask = WeaponRepository.GetAll();

        await Task.WhenAll(armorPiecesTask, talismansTask, weaponsTask);

        _armorPieces = armorPiecesTask.Result;
        _talismans = talismansTask.Result;
        _weapons = weaponsTask.Result;
    }
}
